# -*- coding: utf-8 -*-
"""Sistem Pakar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o3W7z3ujUn2oSyl610NeNJiZbK6yOXzM
"""

!pip install experta

!pip install --upgrade frozendict

from experta import *

class Diagnosis (KnowledgeEngine):
    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(fatigue=True))
    def flu(self):
        print("Diagnosis: You may have the Flu.")

    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(breathing_difficulity=True))
    def pneumonia(self):
        print("Diagnosis: You may have a Pneumonia.")

    @Rule(Fact(Sneezing=True) & Fact(runny_nose=True) & Fact(cough=False))
    def cold(self):
        print("Diagnosis: You may have a Cold.")

    @Rule(Fact(sore_throat=True) & Fact(fever=True))
    def throat_infection(self):
        print("Diagnosis: You may have a Throat Infection.")

    @Rule(Fact(cough=False) & Fact(fever=False) & Fact(fatigue=False))
    def healty(self):
        print("Diagnosis: You seem to be healty.")

    @Rule(Fact(smoking=True) & Fact(lupus=True))
    def osteophorosis(self):
        print("Diagnosis: You may have a Osteophorosis.")

    @Rule(Fact(inflammation=True) & Fact(fever=False) & Fact(peritonitis=True))
    def appendicitis(self):
        print("Diagnosis: You may have a Appendicitis.")

    @Rule(Fact(thalassemia=True) & Fact(elliptocytosis=True))
    def aneumia(self):
        print("Diagnosis: You may have a Aneumia.")

    @Rule(Fact(anorexia=True) & Fact(oliguria=True) & Fact(acceptance=True))
    def die(self):
        print("Diagnosis: You going to End-of-life.")

def get_input():
    """Helper function to get user input as Boolen (yes/no)."""
    def ask_question(question):
      return input(question + "(yes/no): ").strip().lower() == "yes"

    return{
      "cough": ask_question("Do you have a cough?"),
      "fever": ask_question("Do you have a fever?"),
      "fatigue": ask_question("Do you feel tired?"),
      "breathing_difficulity": ask_question("Do you have difficulty breathing?"),
      "Sneezing": ask_question("Do you have a Sneezing?"),
      "runny_nose": ask_question("Do you have a runny nose?"),
      "sore_throat": ask_question("Do you have a sore throat?"),
      "smoking": ask_question("Do you smoke?"),
      "lupus": ask_question("Have you been diagnosed with lupus?"),
      "inflammation": ask_question("Are you experiencing any inflammation or swelling?"),
      "peritonitis": ask_question("Have you been diagnosed with peritonitis?"),
      "thalassemia": ask_question("Do you have a family history of thalassemia?"),
      "elliptocytosis": ask_question("Have you been diagnosed with elliptocytosis?"),
      "anorexia": ask_question("Have you experienced a loss of appetite?"),
      "oliguria": ask_question("Are you producing very little urine (oliguria)?"),
      "acceptance": ask_question("Has the person shown signs of emotional or spiritual acceptance?"),
  }

#Running the expert system
if __name__ == "__main__":
    symptoms = get_input()
    engine = Diagnosis()
    engine.reset() # Reset the Knowladge engine

    for symptom, present in symptoms.items():
        engine.declare(Fact(**{symptom: present})) # Declare Fact

    engine.run() # Run the Inference engine

from experta import *

class SistemPakarMedis(KnowledgeEngine):

    @Rule(Fact(demam=True) & Fact(batuk=True))
    def flu(self):
        print("Diagnosis: flu.")

    @Rule(Fact(sakit_tenggorokan=True) & Fact(demam=True))
    def throat_infection(self):
        print("Dianosis: Radang Tenggorokan. ")

    @Rule(Fact(Batuk=True) & Fact(Demam=True) & Fact(Sakit_tenggorokan=True))
    def mati(self):
        print("Diagnosis: Anda akan Mati.")

#running the expert system
engine = SistemPakarMedis()
engine.reset()
engine.declare(Fact(Demam=True))
engine.declare(Fact(Sakit_tenggorokan=True))  #input symptoms
engine.declare(Fact(Batuk=True))
engine.run()

def forward_chaining(facts, rules):
    inferred = set(facts)
    changed = True

    while changed:
        changed = False
        for rule in rules:
            if rule["if"].issubset(inferred) and rule["then"] not in inferred:
                inferred.add(rule["then"])
                changed = True

    return inferred

facts = {"has_feathers", "has_beak", "cannot_fly"}
rules = [
    {"if": {"has_feathers", "has_beak"}, "then": "is_bird"},
    {"if": {"lays_eggs", "is_bird"}, "then": "is_chicken"},
    {"if": {"cannot_fly", "is_bird"}, "then": "is_penguin"},
    {"if": {"carnivore", "is_bird"}, "then": "is_eagle"},
]

result = forward_chaining(facts, rules)
print("inferred facts:", result)

def backward_chaining(goal, facts, rules):
    if goal in facts:
        return True
    for rule in rules:
        if rule["then"] == goal:
            if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
                return True
    return False

facts = {"likes_computers", "solves_problems"}
rules = [
    {"if": {"likes_computers", "solves_problems"}, "then": "should_be_enginer"},
    {"if": {"should_be_engineer", "likes_programming"}, "then": "software_engineer"}
]

goal = "software_engineer"
result = backward_chaining(goal, facts, rules)
print(f"Is '{goal}'provable? ->", result)

"""Soal Forward
buatlah 2 variabel fact, rules
Rules:
if has_wheels and has_engine -> is_vehicle
if is_vehicle and has_two_wheels  -> is_motorcycle
if is_vehicle and has_four_wheels  -> is_car

Facts: has_wheels, has_engine, has_four_wheels
"""

def forward_chaining(facts, rules):
    inferred = set(facts)
    changed = True

    while changed:
        changed = False
        for rule in rules:
            if rule["if"].issubset(inferred) and rule["then"] not in inferred:
                inferred.add(rule["then"])
                changed = True

    return inferred

facts = {"has_wheels", "has_engine", "has_four_wheels"}
rules = [
    {"if": {"has_wheels", "has_engine"}, "then": "is_vehicle"},
    {"if": {"is_vehicle", "has_two_wheels"}, "then": "is_motorcycle"},
    {"if": {"is_vehicle", "has_four_wheels"}, "then": "is_car"},
]

result = forward_chaining(facts, rules)
print("inferred facts:", result)

"""Soal Backward
buatlah 3 variabel goal, fact, rules
Goal : is_penguin
Rules
if is_bird and cannot_fly -> is_penguin
if has_feathers  -> is_bird
if has_small_wings  -> cannot_fly

Facts: has_feathers, has_small_wings
"""

def backward_chaining(goal, facts, rules):
    if goal in facts:
        return True
    for rule in rules:
        if rule["then"] == goal:
            if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
                return True
    return False

facts = {"has_feathers", "has_small_wings"}
rules = [
    {"if": {"is_bird", "cannot_fly"}, "then": "is_penguin"},
    {"if": {"has_feathers"}, "then": "is_bird"},
    {"if": {"has_small_wings"}, "then": "cannot_fly"}
]

goal = "is_penguin"
result = backward_chaining(goal, facts, rules)
print(f"Is '{goal}'provable? ->", result)